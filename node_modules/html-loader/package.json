{
  "_from": "html-loader",
  "_id": "html-loader@1.1.0",
  "_inBundle": false,
  "_integrity": "sha512-zwLbEgy+i7sgIYTlxI9M7jwkn29IvdsV6f1y7a2aLv/w8l1RigVk0PFijBZLLFsdi2gvL8sf2VJhTjLlfnK8sA==",
  "_location": "/html-loader",
  "_phantomChildren": {
    "big.js": "5.2.2",
    "emojis-list": "3.0.0",
    "json5": "2.1.3"
  },
  "_requested": {
    "escapedName": "html-loader",
    "fetchSpec": "latest",
    "name": "html-loader",
    "raw": "html-loader",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/html-loader/-/html-loader-1.1.0.tgz",
  "_shasum": "91915f4d274caa9d46d1c3dc847cd82bfc037dbd",
  "_spec": "html-loader",
  "_where": "/home/ade/dicoding/frontend",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/html-loader/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "html-minifier-terser": "^5.0.5",
    "htmlparser2": "^4.1.0",
    "loader-utils": "^2.0.0",
    "parse-srcset": "^1.0.2",
    "schema-utils": "^2.6.5"
  },
  "deprecated": false,
  "description": "Html loader module for webpack",
  "devDependencies": {
    "@babel/cli": "^7.8.4",
    "@babel/core": "^7.9.0",
    "@babel/preset-env": "^7.9.0",
    "@commitlint/cli": "^8.3.5",
    "@commitlint/config-conventional": "^8.3.4",
    "@webpack-contrib/defaults": "^6.3.0",
    "@webpack-contrib/eslint-config-webpack": "^3.0.0",
    "babel-jest": "^25.2.6",
    "commitlint-azure-pipelines-cli": "^1.0.3",
    "cross-env": "^7.0.2",
    "del": "^5.1.0",
    "del-cli": "^3.0.0",
    "es-check": "^5.1.0",
    "eslint": "^6.8.0",
    "eslint-config-prettier": "^6.10.1",
    "eslint-plugin-import": "^2.20.2",
    "file-loader": "^6.0.0",
    "handlebars": "^4.7.4",
    "husky": "^4.2.3",
    "jest": "^25.2.6",
    "jest-junit": "^10.0.0",
    "lint-staged": "^10.1.1",
    "memfs": "^3.1.2",
    "npm-run-all": "^4.1.5",
    "posthtml": "^0.12.0",
    "posthtml-webp": "^1.5.0",
    "prettier": "^2.0.2",
    "standard-version": "^7.1.0",
    "webpack": "^4.42.0"
  },
  "engines": {
    "node": ">= 10.13.0"
  },
  "files": [
    "dist"
  ],
  "funding": {
    "type": "opencollective",
    "url": "https://opencollective.com/webpack"
  },
  "homepage": "https://github.com/webpack-contrib/html-loader",
  "keywords": [
    "html",
    "loader",
    "webpack"
  ],
  "license": "MIT",
  "main": "dist/cjs.js",
  "name": "html-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^4.0.0 || ^5.0.0"
  },
  "readme": "<div align=\"center\">\n  <img width=\"200\" height=\"200\" src=\"https://worldvectorlogo.com/logos/html5.svg\" alt=\"html-loader\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" vspace=\"\" hspace=\"25\" src=\"https://worldvectorlogo.com/logos/webpack.svg\" alt=\"webpack\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# html-loader\n\nExports HTML as string. HTML is minimized when the compiler demands.\n\n## Getting Started\n\nTo begin, you'll need to install `html-loader`:\n\n```console\nnpm install --save-dev html-loader\n```\n\nThen add the plugin to your `webpack` config. For example:\n\n**file.js**\n\n```js\nimport html from './file.html';\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n      },\n    ],\n  },\n};\n```\n\n## Options\n\n|                Name                 |        Type         |                   Default                    | Description                                      |\n| :---------------------------------: | :-----------------: | :------------------------------------------: | :----------------------------------------------- |\n|   **[`attributes`](#attributes)**   | `{Boolean\\|Object}` |                    `true`                    | Enables/Disables attributes handling             |\n| **[`preprocessor`](#preprocessor)** |    `{Function}`     |                 `undefined`                  | Allows pre-processing of content before handling |\n|     **[`minimize`](#minimize)**     | `{Boolean\\|Object}` | `true` in production mode, otherwise `false` | Tell `html-loader` to minimize HTML              |\n|     **[`esModule`](#esmodule)**     |     `{Boolean}`     |                   `false`                    | Use ES modules syntax                            |\n\n### `attributes`\n\nType: `Boolean|Object`\nDefault: `true`\n\nBy default every loadable attributes (for example - `<img src=\"image.png\">`) is imported (`const img = require('./image.png')` or `import img from \"./image.png\"\"`).\nYou may need to specify loaders for images in your configuration (recommended `file-loader` or `url-loader`).\n\nSupported tags and attributes:\n\n- the `src` attribute of the `audio` tag\n- the `src` attribute of the `embed` tag\n- the `src` attribute of the `img` tag\n- the `srcset` attribute of the `img` tag\n- the `src` attribute of the `input` tag\n- the `href` attribute of the `link` tag (only for stylesheets)\n- the `data` attribute of the `object` tag\n- the `src` attribute of the `script` tag\n- the `src` attribute of the `source` tag\n- the `srcset` attribute of the `source` tag\n- the `src` attribute of the `track` tag\n- the `poster` attribute of the `video` tag\n- the `src` attribute of the `video` tag\n\n#### `Boolean`\n\nThe `true` value enables processing of all default elements and attributes, the `false` disable processing of all attributes.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n        options: {\n          // Disables attributes processing\n          attributes: false,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `Object`\n\nAllows you to specify which tags and attributes to process, filter them, filter urls and process sources starts with `/`.\nFor example:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n        options: {\n          attributes: {\n            list: [\n              {\n                tag: 'img',\n                attribute: 'src',\n                type: 'src',\n              },\n              {\n                tag: 'img',\n                attribute: 'srcset',\n                type: 'srcset',\n              },\n              {\n                tag: 'img',\n                attribute: 'data-src',\n                type: 'src',\n              },\n              {\n                tag: 'img',\n                attribute: 'data-srcset',\n                type: 'srcset',\n              },\n              {\n                tag: 'link',\n                attribute: 'href',\n                type: 'src',\n                filter: (tag, attribute, attributes) => {\n                  if (!/stylesheet/i.test(attributes.rel)) {\n                    return false;\n                  }\n\n                  if (\n                    attributes.type &&\n                    attributes.type.trim().toLowerCase() !== 'text/css'\n                  ) {\n                    return false;\n                  }\n\n                  return true;\n                },\n              },\n              // More attributes\n            ],\n            urlFilter: (attribute, value, resourcePath) => {\n              // The `attribute` argument contains a name of the HTML attribute.\n              // The `value` argument contains a value of the HTML attribute.\n              // The `resourcePath` argument contains a path to the loaded HTML file.\n\n              if (/example\\.pdf$/.test(value)) {\n                return false;\n              }\n\n              return true;\n            },\n            root: '.',\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `list`\n\nType: `Array`\nDefault: https://github.com/webpack-contrib/html-loader#attributes\n\nAllows to setup which tags and attributes to process and how, and the ability to filter some of them.\n\nFor example:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n        options: {\n          attributes: {\n            list: [\n              {\n                // Tag name\n                tag: 'img',\n                // Attribute name\n                attribute: 'src',\n                // Type of processing, can be `src` or `scrset`\n                type: 'src',\n              },\n              {\n                // Tag name\n                tag: 'img',\n                // Attribute name\n                attribute: 'srcset',\n                // Type of processing, can be `src` or `scrset`\n                type: 'srcset',\n              },\n              {\n                tag: 'img',\n                attribute: 'data-src',\n                type: 'src',\n              },\n              {\n                tag: 'img',\n                attribute: 'data-srcset',\n                type: 'srcset',\n              },\n              {\n                // Tag name\n                tag: 'link',\n                // Attribute name\n                attribute: 'href',\n                // Type of processing, can be `src` or `scrset`\n                type: 'src',\n                // Allow to filter some attributes\n                filter: (tag, attribute, attributes, resourcePath) => {\n                  // The `tag` argument contains a name of the HTML tag.\n                  // The `attribute` argument contains a name of the HTML attribute.\n                  // The `attributes` argument contains all attributes of the tag.\n                  // The `resourcePath` argument contains a path to the loaded HTML file.\n\n                  if (/my-html\\.html$/.test(resourcePath)) {\n                    return false;\n                  }\n\n                  if (!/stylesheet/i.test(attributes.rel)) {\n                    return false;\n                  }\n\n                  if (\n                    attributes.type &&\n                    attributes.type.trim().toLowerCase() !== 'text/css'\n                  ) {\n                    return false;\n                  }\n\n                  return true;\n                },\n              },\n            ],\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\nIf the tag name is not specified it will process all the tags.\n\n> You can use your custom filter to specify html elements to be processed.\n\nFor example:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n        options: {\n          attributes: {\n            list: [\n              {\n                // Attribute name\n                attribute: 'src',\n                // Type of processing, can be `src` or `scrset`\n                type: 'src',\n                // Allow to filter some attributes (optional)\n                filter: (tag, attribute, attributes, resourcePath) => {\n                  // The `tag` argument contains a name of the HTML tag.\n                  // The `attribute` argument contains a name of the HTML attribute.\n                  // The `attributes` argument contains all attributes of the tag.\n                  // The `resourcePath` argument contains a path to the loaded HTML file.\n\n                  // choose all HTML tags except img tag\n                  return tag.toLowerCase() !== 'img';\n                },\n              },\n            ],\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `urlFilter`\n\nType: `Function`\nDefault: `undefined`\n\nAllow to filter urls. All filtered urls will not be resolved (left in the code as they were written).\nAll non requestable sources (for example `<img src=\"javascript:void(0)\">`) do not handle by default.\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n        options: {\n          attributes: {\n            urlFilter: (attribute, value, resourcePath) => {\n              // The `attribute` argument contains a name of the HTML attribute.\n              // The `value` argument contains a value of the HTML attribute.\n              // The `resourcePath` argument contains a path to the loaded HTML file.\n\n              if (/example\\.pdf$/.test(value)) {\n                return false;\n              }\n\n              return true;\n            },\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `root`\n\nType: `String`\nDefault: `undefined`\n\nFor urls that start with a `/`, the default behavior is to not translate them.\nIf a `root` query parameter is set, however, it will be prepended to the url and then translated.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n        options: {\n          attributes: {\n            root: '.',\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### `preprocessor`\n\nType: `Function`\nDefault: `undefined`\n\nAllows pre-processing of content before handling.\n\n> ⚠ You should always return valid HTML\n\n**file.hbs**\n\n```hbs\n<div>\n  <p>{{firstname}} {{lastname}}</p>\n  <img src=\"image.png\" alt=\"alt\" />\n<div>\n```\n\n#### `Function`\n\nYou can set the `preprocessor` option as a `Function` instance.\n\n**webpack.config.js**\n\n```js\nconst Handlebars = require('handlebars');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.hbs$/i,\n        loader: 'html-loader',\n        options: {\n          preprocessor: (content, loaderContext) => {\n            let result;\n\n            try {\n              result = Handlebars.compile(content)({\n                firstname: 'Value',\n                lastname: 'OtherValue',\n              });\n            } catch (error) {\n              loaderContext.emitError(error);\n\n              return content;\n            }\n\n            return result;\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\nYou can also set the `preprocessor` option as an asynchronous function instance.\n\nFor example:\n\n**webpack.config.js**\n\n```js\nconst Handlebars = require('handlebars');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.hbs$/i,\n        loader: 'html-loader',\n        options: {\n          preprocessor: async (content, loaderContext) => {\n            let result;\n\n            try {\n              result = await Handlebars.compile(content)({\n                firstname: 'Value',\n                lastname: 'OtherValue',\n              });\n            } catch (error) {\n              await loaderContext.emitError(error);\n\n              return content;\n            }\n\n            return result;\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### `minimize`\n\nType: `Boolean|Object`\nDefault: `true` in production mode, otherwise `false`\n\nTell `html-loader` to minimize HTML.\n\n#### `Boolean`\n\nThe enabled rules for minimizing by default are the following ones:\n\n- `collapseWhitespace`\n- `conservativeCollapse`\n- `keepClosingSlash`\n- `minifyCSS`\n- `minifyJS`\n- `removeAttributeQuotes`\n- `removeComments`\n- `removeScriptTypeAttributes`\n- `removeStyleTypeAttributes`\n- `useShortDoctype`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n        options: {\n          minimize: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `Object`\n\n**webpack.config.js**\n\nSee [html-minifier-terser](https://github.com/DanielRuf/html-minifier-terser)'s documentation for more information on the available options.\n\nThe rules can be disabled using the following options in your `webpack.conf.js`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n        options: {\n          minimize: {\n            removeComments: false,\n            collapseWhitespace: false,\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### `esModule`\n\nType: `Boolean`\nDefault: `false`\n\nBy default, `html-loader` generates JS modules that use the CommonJS modules syntax.\nThere are some cases in which using ES modules is beneficial, like in the case of [module concatenation](https://webpack.js.org/plugins/module-concatenation-plugin/) and [tree shaking](https://webpack.js.org/guides/tree-shaking/).\n\nYou can enable a ES module syntax using:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n        options: {\n          esModule: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n## Examples\n\n### CDN\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      { test: /\\.jpg$/, loader: 'file-loader' },\n      { test: /\\.png$/, loader: 'url-loader' },\n    ],\n  },\n  output: {\n    publicPath: 'http://cdn.example.com/[hash]/',\n  },\n};\n```\n\n```html\n<!-- file.html -->\n<img src=\"image.png\" data-src=\"image2x.png\" />\n```\n\n```js\nrequire('html-loader!./file.html');\n\n// => '<img src=\"http://cdn.example.com/49eba9f/a992ca.png\" data-src=\"image2x.png\">'\n```\n\n```js\nrequire('html-loader?attributes[]=img:data-src!./file.html');\n\n// => '<img src=\"image.png\" data-src=\"data:image/png;base64,...\" >'\n```\n\n```js\nrequire('html-loader?attributes[]=img:src&attributes[]=img:data-src!./file.html');\n\n// => '<img src=\"http://cdn.example.com/49eba9f/a992ca.png\" data-src=\"data:image/png;base64,...\" >'\n```\n\n```js\nrequire('html-loader?-attributes!./file.html');\n\n// => '<img src=\"image.jpg\"  data-src=\"image2x.png\" >'\n```\n\n> :warning: `-attributes` it is set attributes: false\n\n```html\n'<img src=http://cdn.example.com/49eba9f/a9f92ca.jpg\ndata-src=data:image/png;base64,...>'\n```\n\n### Process `script` and `link` tags\n\n**script.file.js**\n\n```js\nconsole.log(document);\n```\n\n**style.file.css**\n\n```css\na {\n  color: red;\n}\n```\n\n**file.html**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title of the document</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./style.file.css\" />\n  </head>\n  <body>\n    Content of the document......\n    <script src=\"./script.file.js\"></script>\n  </body>\n</html>\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        use: ['file-loader?name=[name].[ext]', 'extract-loader', 'html-loader'],\n      },\n      {\n        test: /\\.js$/i,\n        exclude: /\\.file.js$/i,\n        loader: 'babel-loader',\n      },\n      {\n        test: /\\.file.js$/i,\n        loader: 'file-loader',\n      },\n      {\n        test: /\\.css$/i,\n        exclude: /\\.file.css$/i,\n        loader: 'css-loader',\n      },\n      {\n        test: /\\.file.css$/i,\n        loader: 'file-loader',\n      },\n    ],\n  },\n};\n```\n\n### 'Root-relative' URLs\n\nWith the same configuration as above:\n\n**file.html**\n\n```html\n<img src=\"/image.jpg\" />\n```\n\n**scripts.js**\n\n```js\nrequire('html-loader!./file.html');\n\n// => '<img src=\"/image.jpg\">'\n```\n\n**other-scripts.js**\n\n```js\nrequire('html-loader?root=.!./file.html');\n\n// => '<img src=\"http://cdn.example.com/49eba9f/a992ca.jpg\">'\n```\n\n### Templating\n\nYou can use any template system. Below is an example for [handlebars](https://handlebarsjs.com/).\n\n**file.hbs**\n\n```hbs\n<div>\n  <p>{{firstname}} {{lastname}}</p>\n  <img src=\"image.png\" alt=\"alt\" />\n<div>\n```\n\n**webpack.config.js**\n\n```js\nconst Handlebars = require('handlebars');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.hbs$/i,\n        loader: 'html-loader',\n        options: {\n          preprocessor: (content, loaderContext) => {\n            let result;\n\n            try {\n              result = Handlebars.compile(content)({\n                firstname: 'Value',\n                lastname: 'OtherValue',\n              });\n            } catch (error) {\n              loaderContext.emitError(error);\n\n              return content;\n            }\n\n            return result;\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### PostHTML\n\nYou can use [PostHTML](https://github.com/posthtml/posthtml) without any additional loaders.\n\n**file.html**\n\n```html\n<img src=\"image.jpg\" />\n```\n\n**webpack.config.js**\n\n```js\nconst posthtml = require('posthtml');\nconst posthtmlWebp = require('posthtml-webp');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.hbs$/i,\n        loader: 'html-loader',\n        options: {\n          preprocessor: () => {\n            let result;\n\n            try {\n              result = posthtml().use(plugin).process(content, { sync: true });\n            } catch (error) {\n              loaderContext.emitError(error);\n\n              return content;\n            }\n\n            return result.html;\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### Export into HTML files\n\nA very common scenario is exporting the HTML into their own _.html_ file, to\nserve them directly instead of injecting with javascript. This can be achieved\nwith a combination of 3 loaders:\n\n- [file-loader](https://github.com/webpack/file-loader)\n- [extract-loader](https://github.com/peerigon/extract-loader)\n- html-loader\n\nThe html-loader will parse the URLs, require the images and everything you\nexpect. The extract loader will parse the javascript back into a proper html\nfile, ensuring images are required and point to proper path, and the file loader\nwill write the _.html_ file for you. Example:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        use: ['file-loader?name=[name].[ext]', 'extract-loader', 'html-loader'],\n      },\n    ],\n  },\n};\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/html-loader.svg\n[npm-url]: https://npmjs.com/package/html-loader\n[node]: https://img.shields.io/node/v/html-loader.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/html-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/html-loader\n[tests]: https://dev.azure.com/webpack-contrib/html-loader/_apis/build/status/webpack-contrib.html-loader?branchName=master\n[tests-url]: https://dev.azure.com/webpack-contrib/html-loader/_build/latest?definitionId=38&branchName=master\n[cover]: https://codecov.io/gh/webpack-contrib/html-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/html-loader\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=html-loader\n[size-url]: https://packagephobia.now.sh/result?p=html-loader\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/html-loader.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
    "clean": "del-cli dist",
    "commitlint": "commitlint --from=master",
    "defaults": "webpack-defaults",
    "lint": "npm-run-all -l -p \"lint:**\"",
    "lint:js": "eslint --cache .",
    "lint:prettier": "prettier \"{**/*,*}.{js,json,md,yml,css,ts}\" --list-different",
    "postbuild": "npm run validate:runtime",
    "prebuild": "npm run clean",
    "prepare": "npm run build",
    "pretest": "npm run lint",
    "release": "standard-version",
    "security": "npm audit",
    "start": "npm run build -- -w",
    "test": "npm run test:coverage",
    "test:coverage": "npm run test:only -- --coverage",
    "test:only": "cross-env NODE_ENV=test jest",
    "test:watch": "npm run test:only -- --watch",
    "validate:runtime": "es-check es5 \"dist/runtime/**/*.js\""
  },
  "version": "1.1.0"
}
